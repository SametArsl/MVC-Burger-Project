// <auto-generated />
using System;
using MVC_Burger_Project.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_Burger_Project.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230829104326_FeedbackAdded")]
    partial class FeedbackAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DrinkOrder", b =>
                {
                    b.Property<int>("DrinksID")
                        .HasColumnType("int");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.HasKey("DrinksID", "OrdersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("DrinkOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ae6d5f3c-e048-4490-8666-898d548995b9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5cc9c1ae-7904-4033-81e6-1e31f648fc27",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Bill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Burger", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("OrderID");

                    b.ToTable("Burgers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8783),
                            Description = "A timeless favorite made with juicy beef patty, fresh lettuce, ripe tomatoes, and our special house sauce.",
                            Name = "Classic Beef Burger",
                            Picture = "classicbeefburger.png",
                            Price = 7m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8785),
                            Description = "Indulge in the rich flavors of our savory beef patty topped with melted cheese, caramelized onions, and tangy pickles.",
                            Name = "Savory Beef Burger",
                            Picture = "savorybeefburger.png",
                            Price = 8m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8786),
                            Description = "For those who crave heat, our spicy beef burger features a fiery patty, jalapeños, and pepper jack cheese.",
                            Name = "Spicy Beef Burger",
                            Picture = "spicybeefburger.png",
                            Price = 8m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8788),
                            Description = "Double the cheese, double the satisfaction! Enjoy our beef patty layered with multiple cheese varieties and a burst of flavors.",
                            Name = "Cheese Lover's Beef Burger",
                            Picture = "cheeseloversbeefburger.png",
                            Price = 8m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8789),
                            Description = "Dive into the smoky goodness of our BBQ beef burger, featuring a char-grilled patty, crispy bacon, and tangy barbecue sauce.",
                            Name = "BBQ Beef Burger",
                            Picture = "bbqbeefburger.png",
                            Price = 10m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8790),
                            Description = "A gourmet delight with a beef patty topped with sautéed mushrooms and melted Swiss cheese.",
                            Name = "Mushroom Swiss Beef Burger",
                            Picture = "mushroomswissbeefburger.png",
                            Price = 9m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8792),
                            Description = "For the bacon enthusiasts, our deluxe beef burger includes a generous helping of crispy bacon, lettuce, and creamy mayo.",
                            Name = "Bacon Deluxe Beef Burger",
                            Picture = "bacondeluxebeefburger.png",
                            Price = 10m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8793),
                            Description = "When one patty isn't enough, enjoy the indulgence of a double beef patty burger with all your favorite toppings.",
                            Name = "Double Patty Beef Burger",
                            Picture = "doublepattybeefburger.png",
                            Price = 15m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8794),
                            Description = "A healthier option featuring a tender grilled chicken patty, lettuce, tomatoes, and zesty herb mayo.",
                            Name = "Grilled Chicken Burger",
                            Picture = "grilledchickenburger.png",
                            Price = 8m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8795),
                            Description = "Satisfy your cravings with our crispy fried chicken patty topped with fresh veggies and tangy sauce.",
                            Name = "Crispy Chicken Burger",
                            Picture = "crispychickenburger.png",
                            Price = 9m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 11,
                            CategoryID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8797),
                            Description = "A garden-fresh delight with a hearty veggie patty, lettuce, tomatoes, and a drizzle of balsamic glaze.",
                            Name = "Veggie Delight Burger",
                            Picture = "veggiedelightburger.png",
                            Price = 11m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 12,
                            CategoryID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8798),
                            Description = "Experience the earthy flavors of our portobello mushroom patty topped with roasted red peppers and garlic aioli.",
                            Name = "Portobello Mushroom Burger",
                            Picture = "portobellomushroomburger.png",
                            Price = 12m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 13,
                            CategoryID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8800),
                            Description = "A feast for plant-based eaters, our ultimate vegan burger features a protein-rich patty, avocado, and cashew cream sauce.",
                            Name = "Ultimate Vegan Burger",
                            Picture = "ultimateveganburger.png",
                            Price = 14m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 14,
                            CategoryID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8803),
                            Description = "Savor the goodness of quinoa and black beans in our vegan burger, complemented by avocado slices and a touch of lime.",
                            Name = "Quinoa Black Bean Burger",
                            Picture = "quinoablackbeanburger.png",
                            Price = 15m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.BurgerIngredient", b =>
                {
                    b.Property<int>("BurgerID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.HasKey("BurgerID", "IngredientID");

                    b.HasIndex("IngredientID");

                    b.ToTable("BurgerIngredients");

                    b.HasData(
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 12
                        },
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 15
                        },
                        new
                        {
                            BurgerID = 1,
                            IngredientID = 28
                        },
                        new
                        {
                            BurgerID = 2,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 2,
                            IngredientID = 17
                        },
                        new
                        {
                            BurgerID = 2,
                            IngredientID = 13
                        },
                        new
                        {
                            BurgerID = 2,
                            IngredientID = 15
                        },
                        new
                        {
                            BurgerID = 2,
                            IngredientID = 29
                        },
                        new
                        {
                            BurgerID = 3,
                            IngredientID = 2
                        },
                        new
                        {
                            BurgerID = 3,
                            IngredientID = 16
                        },
                        new
                        {
                            BurgerID = 3,
                            IngredientID = 18
                        },
                        new
                        {
                            BurgerID = 3,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 3,
                            IngredientID = 31
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 17
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 19
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 12
                        },
                        new
                        {
                            BurgerID = 4,
                            IngredientID = 33
                        },
                        new
                        {
                            BurgerID = 5,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 5,
                            IngredientID = 20
                        },
                        new
                        {
                            BurgerID = 5,
                            IngredientID = 17
                        },
                        new
                        {
                            BurgerID = 5,
                            IngredientID = 14
                        },
                        new
                        {
                            BurgerID = 5,
                            IngredientID = 34
                        },
                        new
                        {
                            BurgerID = 6,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 6,
                            IngredientID = 19
                        },
                        new
                        {
                            BurgerID = 6,
                            IngredientID = 21
                        },
                        new
                        {
                            BurgerID = 6,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 6,
                            IngredientID = 30
                        },
                        new
                        {
                            BurgerID = 7,
                            IngredientID = 1
                        },
                        new
                        {
                            BurgerID = 7,
                            IngredientID = 20
                        },
                        new
                        {
                            BurgerID = 7,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 7,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 7,
                            IngredientID = 30
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 3
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 17
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 12
                        },
                        new
                        {
                            BurgerID = 8,
                            IngredientID = 15
                        },
                        new
                        {
                            BurgerID = 9,
                            IngredientID = 4
                        },
                        new
                        {
                            BurgerID = 9,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 9,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 9,
                            IngredientID = 32
                        },
                        new
                        {
                            BurgerID = 10,
                            IngredientID = 5
                        },
                        new
                        {
                            BurgerID = 10,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 10,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 10,
                            IngredientID = 15
                        },
                        new
                        {
                            BurgerID = 10,
                            IngredientID = 35
                        },
                        new
                        {
                            BurgerID = 11,
                            IngredientID = 6
                        },
                        new
                        {
                            BurgerID = 11,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 11,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 11,
                            IngredientID = 22
                        },
                        new
                        {
                            BurgerID = 11,
                            IngredientID = 36
                        },
                        new
                        {
                            BurgerID = 12,
                            IngredientID = 7
                        },
                        new
                        {
                            BurgerID = 12,
                            IngredientID = 27
                        },
                        new
                        {
                            BurgerID = 12,
                            IngredientID = 24
                        },
                        new
                        {
                            BurgerID = 12,
                            IngredientID = 37
                        },
                        new
                        {
                            BurgerID = 13,
                            IngredientID = 8
                        },
                        new
                        {
                            BurgerID = 13,
                            IngredientID = 25
                        },
                        new
                        {
                            BurgerID = 13,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 13,
                            IngredientID = 11
                        },
                        new
                        {
                            BurgerID = 13,
                            IngredientID = 38
                        },
                        new
                        {
                            BurgerID = 14,
                            IngredientID = 9
                        },
                        new
                        {
                            BurgerID = 14,
                            IngredientID = 25
                        },
                        new
                        {
                            BurgerID = 14,
                            IngredientID = 26
                        },
                        new
                        {
                            BurgerID = 14,
                            IngredientID = 10
                        },
                        new
                        {
                            BurgerID = 14,
                            IngredientID = 11
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Hamburgers"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Chicken Burgers"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Vegetarian Burgers"
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "Vegan Burgers"
                        },
                        new
                        {
                            CategoryID = 5,
                            Name = "Sides"
                        },
                        new
                        {
                            CategoryID = 6,
                            Name = "Drinks"
                        },
                        new
                        {
                            CategoryID = 7,
                            Name = "Sauces"
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Drink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8536),
                            Name = "Pepsi",
                            Picture = "pepsi.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8537),
                            Name = "Pepsi-Max",
                            Picture = "pepsimax.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8539),
                            Name = "Pepsi-Twist",
                            Picture = "pepsitwist.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8540),
                            Name = "Pepsi-Mango",
                            Picture = "pepsimango.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8541),
                            Name = "Pepsi-Raspberry",
                            Picture = "pepsiraspberry.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8542),
                            Name = "7UP",
                            Picture = "7up.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8543),
                            Name = "Fanta",
                            Picture = "fanta.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8544),
                            Name = "Ice-Tea Lemon",
                            Picture = "icetealemon.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8545),
                            Name = "Ice-Tea Peach",
                            Picture = "iceteapeach.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 10,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8546),
                            Name = "Ayran",
                            Picture = "ayran.jpg",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 11,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8548),
                            Name = "Chocolate Milkshake",
                            Picture = "chocolatemilkshake.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 12,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8549),
                            Name = "Strawberry Milkshake",
                            Picture = "strawberrymilkshake.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 13,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8550),
                            Name = "Vanilla Milkshake",
                            Picture = "vanillamilkshake.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8236),
                            Name = "Beef Patty",
                            Price = 5m
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8247),
                            Name = "Spicy Beef Patty",
                            Price = 5m
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8248),
                            Name = "Double Beef Patty",
                            Price = 8m
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8249),
                            Name = "Grilled Chicken Patty",
                            Price = 4m
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8250),
                            Name = "Crispy Fried Chicken Patty",
                            Price = 5m
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8251),
                            Name = "Veggie Patty",
                            Price = 3m
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8253),
                            Name = "Portobello Mushroom Patty",
                            Price = 3m
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8253),
                            Name = "Vegan Patty (Protein-rich)",
                            Price = 4m
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8254),
                            Name = "Quinoa Black Bean Patty",
                            Price = 5m
                        },
                        new
                        {
                            ID = 10,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8256),
                            Name = "Lettuce",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 11,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8257),
                            Name = "Tomato",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 12,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8258),
                            Name = "Onion",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 13,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8259),
                            Name = "Caramelized Onions",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 14,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8260),
                            Name = "Onion Rings",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 15,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8261),
                            Name = "Pickles",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 16,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8262),
                            Name = "Jalapenos",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 17,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8263),
                            Name = "Cheese",
                            Price = 1m
                        },
                        new
                        {
                            ID = 18,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8264),
                            Name = "Pepper Jack Cheese",
                            Price = 1m
                        },
                        new
                        {
                            ID = 19,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8265),
                            Name = "Swiss Cheese",
                            Price = 1m
                        },
                        new
                        {
                            ID = 20,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8266),
                            Name = "Bacon",
                            Price = 1m
                        },
                        new
                        {
                            ID = 21,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8267),
                            Name = "Sauteed Mushrooms",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 22,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8268),
                            Name = "Cucumber",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 23,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8269),
                            Name = "Roasted Red Peppers",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 24,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8270),
                            Name = "Arugula",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 25,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8271),
                            Name = "Avocado Slices",
                            Price = 1m
                        },
                        new
                        {
                            ID = 26,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8272),
                            Name = "Lime",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 27,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8274),
                            Name = "Roasted Red Peppers",
                            Price = 0.50m
                        },
                        new
                        {
                            ID = 28,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8275),
                            Name = "House Sauce",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 29,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8276),
                            Name = "Mustard",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 30,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8277),
                            Name = "Mayo",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 31,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8278),
                            Name = "Chipotle Mayo",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 32,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8279),
                            Name = "Herb Mayo",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 33,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8280),
                            Name = "Ketchup",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 34,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8281),
                            Name = "BBQ Sauce",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 35,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8282),
                            Name = "Tangy Sauce",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 36,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8283),
                            Name = "Balsamic Glaze",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 37,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8284),
                            Name = "Garlic Aioli",
                            Price = 0.25m
                        },
                        new
                        {
                            ID = 38,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8285),
                            Name = "Cashew Cream Sauce",
                            Price = 0.25m
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"), 1L, 1);

                    b.Property<int>("BurgerID")
                        .HasColumnType("int");

                    b.Property<int>("DrinkID")
                        .HasColumnType("int");

                    b.Property<int>("SideID")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("MenuID");

                    b.HasIndex("BurgerID");

                    b.HasIndex("DrinkID");

                    b.HasIndex("SideID");

                    b.HasIndex("SizeID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuID = 1,
                            BurgerID = 1,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 2,
                            BurgerID = 2,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 3,
                            BurgerID = 3,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 4,
                            BurgerID = 4,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 5,
                            BurgerID = 5,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 6,
                            BurgerID = 6,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 7,
                            BurgerID = 7,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 8,
                            BurgerID = 8,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 9,
                            BurgerID = 9,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 10,
                            BurgerID = 10,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 11,
                            BurgerID = 11,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 12,
                            BurgerID = 12,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 13,
                            BurgerID = 13,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        },
                        new
                        {
                            MenuID = 14,
                            BurgerID = 14,
                            DrinkID = 1,
                            SideID = 1,
                            SizeID = 1
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Sauce", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sauces");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Side", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8625),
                            Name = "French Fries",
                            Picture = "frenchfries.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8627),
                            Name = "Curly Fries",
                            Picture = "curlyfries.jpg",
                            Price = 1.25m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8628),
                            Name = "Serrated Fries",
                            Picture = "serratedfries.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8629),
                            Name = "Chicken Nuggets",
                            Picture = "chickennuggets.jpg",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8631),
                            Name = "Cheese Sticks",
                            Picture = "cheesesticks.jpg",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8632),
                            Name = "Onion Rings",
                            Picture = "onionrings.jpg",
                            Price = 1m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8633),
                            Name = "Buffalo Wings",
                            Picture = "buffalowings.jpg",
                            Price = 2m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8634),
                            Name = "Glaze Donut",
                            Picture = "glazedonut.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8635),
                            Name = "Apple Pie",
                            Picture = "applepie.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 10,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8636),
                            Name = "Souffle",
                            Picture = "souffle.jpg",
                            Price = 1.5m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Size", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8714),
                            Name = "Small",
                            Price = 0m,
                            Quantity = 0
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8715),
                            Name = "Medium",
                            Price = 1m,
                            Quantity = 0
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8716),
                            Name = "Large",
                            Price = 2m,
                            Quantity = 0
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2023, 8, 29, 13, 43, 25, 460, DateTimeKind.Local).AddTicks(8717),
                            Name = "X-Large",
                            Price = 3m,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("OrderSauce", b =>
                {
                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("SaucesID")
                        .HasColumnType("int");

                    b.HasKey("OrdersID", "SaucesID");

                    b.HasIndex("SaucesID");

                    b.ToTable("OrderSauce");
                });

            modelBuilder.Entity("OrderSide", b =>
                {
                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("SidesID")
                        .HasColumnType("int");

                    b.HasKey("OrdersID", "SidesID");

                    b.HasIndex("SidesID");

                    b.ToTable("OrderSide");
                });

            modelBuilder.Entity("OrderSize", b =>
                {
                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("SizesID")
                        .HasColumnType("int");

                    b.HasKey("OrdersID", "SizesID");

                    b.HasIndex("SizesID");

                    b.ToTable("OrderSize");
                });

            modelBuilder.Entity("DrinkOrder", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Drink", null)
                        .WithMany()
                        .HasForeignKey("DrinksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.AppUser", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppRole", "AppRole")
                        .WithMany()
                        .HasForeignKey("AppRoleId");

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Bill", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Burger", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Category", "Category")
                        .WithMany("Burgers")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", null)
                        .WithMany("Burgers")
                        .HasForeignKey("OrderID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.BurgerIngredient", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Burger", "Burger")
                        .WithMany("BurgerIngredients")
                        .HasForeignKey("BurgerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("BurgerIngredients")
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Menu", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");

                    b.Navigation("Drink");

                    b.Navigation("Side");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Order", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("OrderSauce", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Sauce", null)
                        .WithMany()
                        .HasForeignKey("SaucesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderSide", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Side", null)
                        .WithMany()
                        .HasForeignKey("SidesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderSize", b =>
                {
                    b.HasOne("MVC_Burger_Project.Models.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Burger_Project.Models.Entities.Size", null)
                        .WithMany()
                        .HasForeignKey("SizesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Burger", b =>
                {
                    b.Navigation("BurgerIngredients");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Category", b =>
                {
                    b.Navigation("Burgers");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Ingredient", b =>
                {
                    b.Navigation("BurgerIngredients");
                });

            modelBuilder.Entity("MVC_Burger_Project.Models.Entities.Order", b =>
                {
                    b.Navigation("Burgers");
                });
#pragma warning restore 612, 618
        }
    }
}
